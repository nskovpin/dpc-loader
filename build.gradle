group 'ru.at_consulting.bigdata'
version '1.0-SNAPSHOT'

allprojects (){
    apply plugin: 'maven-publish'
    apply plugin: 'idea'
    apply plugin: 'scala'
    apply plugin: 'java'
    apply plugin: "jacoco"

    sourceCompatibility = 1.7

    ext {

        shadow = [
//                "jackson-databind",
//                "jackson-annotations",
//                "jackson-core",
//                "jackson-module-scala_2.10",
//                "jackson-module-paranamer",
//                "paranamer",
//                "atc-tools"
        ]

        urls = [
                confluent: 'http://packages.confluent.io/maven/',
                atc      : 'http://192.168.36.82:8081/nexus/content/repositories/'
        ]

        vers = [
                avro     : '1.7.7',
                ignite   : '1.8.0',
                scala    : '2.11',
                kafka    : '0.10.0.1',
                confluent: '3.0.0',
                hadoop   : '2.7.3',
                hive     : '2.1.0',
                hdp      : '2.5.3.0-37',
                jodatime : '2.9.4',
                junit    : '4.12',
                mockito  : '2.2.9',
                logback  : '1.0.9',
                spark    : '1.6.1'
        ]

        deps = [
                groovy   : 'org.codehaus.groovy:groovy-all:2.4.7',
                spark    : [
                        main: [
                                "org.apache.spark:spark-core_2.10:$vers.spark",
                                "org.apache.spark:spark-sql_2.10:$vers.spark"
                        ]
                ],
                scala    : [
                        main: [
                                "org.scala-lang:scala-library:2.10.4"
                        ],
                        test: [
                                "org.scalatest:scalatest_2.10:2.0"
                        ]

                ],

                kafka    : [
                        main: [
                                "org.apache.kafka:kafka_$vers.scala:$vers.kafka",
                                "org.apache.kafka:connect-api:$vers.kafka"
                        ],
                        test: [
                                'org.apache.curator:curator-test:2.11.0',
                                "org.apache.kafka:kafka_$vers.scala:$vers.kafka:test"
                        ]
                ],
                confluent: [
                        main: [
                                "io.confluent:kafka-avro-serializer:$vers.confluent"
                        ],
                        test: [
                                "io.confluent:kafka-schema-registry:$vers.confluent",
                                "io.confluent:kafka-schema-registry:$vers.confluent:tests"
                        ]
                ],
                ignite   : [
                        main: [
                                "org.apache.ignite:ignite-core:$vers.ignite",
                                "org.apache.ignite:ignite-indexing:$vers.ignite",
                        ]
                ],
                guava    : [
                        main: [
                                'com.google.guava:guava:20.0'
                        ]

                ],
                jodatime : [
                        main: [
                                "joda-time:joda-time:$vers.jodatime"
                        ]
                ]
        ]
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url urls.confluent
        }
        maven {
            url urls.atc + 'hortonworks/'
        }
        maven {
            url urls.atc + 'releases/'
        }
    }

    dependencies {
        compile "org.projectlombok:lombok:1.16.14"
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.4.4'
        compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-scala_2.10', version: '2.4.4'

        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'
        compile ('ru.at_consulting.bigdata:atc-tools:0.4.16-SNAPSHOT') {
            exclude group: 'com.google.guava'
            exclude group: 'javax.servlet'
        }
        compile deps.spark.main
        compile deps.scala.main
        compile "org.mockftpserver:MockFtpServer:2.7.1"


        testCompile deps.scala.test
        testCompile group: 'junit', name: 'junit', version: '4.11'
    }
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
}

task listJars() {
    doLast {
        configurations.compile.each { File file -> println file.name }
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': 'ru.at_consulting.bigdata.dpc.cluster.GroupDims'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it } }
    into "libs"
    with jar
}

task fatJarShadowed(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': 'ru.at_consulting.bigdata.dpc.cluster.GroupDims'
    }
    baseName = project.name + '-shadowed'
    def collection = shadow.collect()

    from {
        configurations.compile.<File> collect { it }.findAll {
            it.isDirectory() || containProperDependency(it, collection)
        }.collect({ it.isDirectory() ? it : zipTree(it) })
    }
    with jar
}

task printProperties {
    doLast {
        println deps.kafka.main
        println deps.confluent.main
        println urls.confluent
    }
}

task copyDependencies(type: Copy) {
    from configurations.compile
    into 'dependencies'
}


static containProperDependency(File file, Collection<String> collection) {
    def contains = false;
    collection.each {
        if (file.name.contains(it)) {
            contains = true
        }
    }
    return contains
}

task spec(dependsOn: ['testClasses'], type: JavaExec) {
    main = 'org.scalatest.tools.Runner'
    args = ['-R', 'build/classes/test', '-o']
    classpath = sourceSets.test.runtimeClasspath
}

//test.dependsOn spec